# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QuTlyEYw6yDGz6KCk8ag-fOYeki5ln_5
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LogisticRegression, LinearRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report
import streamlit as st

# Load the data
@st.cache
def load_data():
    data = pd.read_csv('/content/2022.csv')  # Replace with the correct path
    data = data[["Institute", "Academic Program Name", "Seat Type", "Opening Rank", "Closing Rank", "Round"]]
    data.dropna(inplace=True)

    # Replace 'OPEN' with 0 in Opening and Closing Rank and convert to numeric
    data["Opening Rank"] = pd.to_numeric(data["Opening Rank"].replace("OPEN", 0), errors="coerce")
    data["Closing Rank"] = pd.to_numeric(data["Closing Rank"].replace("OPEN", 0), errors="coerce")
    data.dropna(subset=["Opening Rank", "Closing Rank"], inplace=True)

    # Encoding categorical features
    for col in ["Institute", "Academic Program Name", "Seat Type"]:
        data[col] = data[col].astype('category').cat.codes

    return data

# Load and preprocess the data
data = load_data()
X = data[["Seat Type", "Opening Rank", "Closing Rank"]]
y_institute = data["Institute"]
y_program = data["Academic Program Name"]
y_round = data["Round"]

# Train-test split
X_train, X_test, y_train_institute, y_test_institute = train_test_split(X, y_institute, test_size=0.2, random_state=42)
X_train_program, X_test_program, y_train_program, y_test_program = train_test_split(X, y_program, test_size=0.2, random_state=42)
X_train_round, X_test_round, y_train_round, y_test_round = train_test_split(X, y_round, test_size=0.2, random_state=42)

# Initialize models
knn_model = KNeighborsClassifier(n_neighbors=5)
logistic_model = LogisticRegression(max_iter=1000, multi_class='multinomial', solver='lbfgs')
linear_model = LinearRegression()

# Train and predict for Institute
knn_model.fit(X_train, y_train_institute)
institute_predictions_knn = knn_model.predict(X_test)
accuracy_institute = accuracy_score(y_test_institute, institute_predictions_knn) * 100

# Logistic Regression for Institute
logistic_model.fit(X_train, y_train_institute)
institute_predictions_log = logistic_model.predict(X_test)
accuracy_logistic_institute = accuracy_score(y_test_institute, institute_predictions_log) * 100

# Streamlit UI
st.title("Institute, Program, and Round Prediction")
st.write("### Predicting the Institute, Program, and Round based on Seat Type and Ranks")

# Show dataset
st.write("### Data Preview")
st.write(data.head())

# Display metrics for KNN and Logistic Regression
st.write(f"### KNN Model Accuracy (Institute Prediction): {accuracy_institute:.2f}%")
st.write(f"### Logistic Regression Model Accuracy (Institute Prediction): {accuracy_logistic_institute:.2f}%")

# Display Classification Report
st.write("### KNN Classification Report (Institute Prediction)")
st.text(classification_report(y_test_institute, institute_predictions_knn))

st.write("### Logistic Regression Classification Report (Institute Prediction)")
st.text(classification_report(y_test_institute, institute_predictions_log))

# Optionally, you can add more visualizations or other metrics here